<?php

/**
 * @file
 * Adds the required Javascript to the checkout completion page to allow
 * e-commerce statistics tracking through RecommenderGhost.
 *
 * The JS tracking part of this module is based on the Commerce Google Analytics
 * module source code.
 *
 * @author: hhhc
 */

/**
 * Implements hook_order().
 */
function recommenderghost_ubercart_uc_checkout_complete($order, $account) {

  // We allow different methods. Default to 'JS' but
  // allow users to override if they really need to.
  $tracking_method = variable_get('recommenderghost_tracking_method', 'JS');
  $tracking_details = recommenderghost_ubercart_get_tracking_data($order);
  if ($tracking_method == "JS") {
    $script = "";
    foreach ($tracking_details as $one) {
      $script .= "
      easyrec_sendAction('buy',{
          itemId:'" . $one["itemid"] . "',
          itemUrl:'" . check_url($one["itemurl"]) . "',
          itemDescription: '" . addslashes(check_plain($one["itemdescription"])) . "',";
      if (isset($one["itemimageurl"])) {
        $script .= "
          itemImageUrl:'" . check_url($one["itemimageurl"]) . "',";
      }
      if ($one["userid"]) {
        $script .= "
          userId:'" . $one["userid"] . "',";
      }
      $script .= "
        });
        ";
    }
    $scope = variable_get('recommenderghost_js_scope', 'header');
    // Add the code to the footer.
    drupal_add_js($script, array(
                          'type' => 'inline',
                          'scope' => $scope,
                          'preprocess' => FALSE,
                          'weight' => 100));
  }
  else {
    foreach ($tracking_details as $one) {
      // Call per REST.
      $recommendations = recommenderghost_call_api("buy", $one);
    }
  }

}

/**
 * Extract the information to be passed to RecommenderGhost from order tracking.
 *
 * @param object $order
 *   The fully loaded order object to convert into RG JS.
 *
 * @return array
 *   The array with values that should be used for tracking.
 */
function recommenderghost_ubercart_get_tracking_data($order) {
  // Following privacy policy of RecommenderGhost we need to
  // encode user ids into non-revertable formatOutput.
  $uid = sha1($order->uid);
  $tracking_details = array();

  // Loop through the products on the order.
  foreach ($order->products as $line_item) {
    $nid = $line_item->nid;

    // Load the node and its pictures.
    $node = node_load($nid);
    $img_field = variable_get('recommenderghost_image_token_field', '');
    $path = token_replace($img_field, array('node' => $node));
    // Filter unchanged tokens.
    $clean = preg_replace('/\[(.*)\]/is', "", $path);
    $clean_array = explode(",", $clean);
    // Only use relative paths.
    $url = parse_url(trim($clean_array[0]));
    $item_image_url = $url['path'];

    $item_id = $node->nid;
    $item_url = "/" . drupal_lookup_path("alias", "node/" . $nid);
    $title = $node->title;

    $one = array(
      "itemid" => $item_id,
      "itemurl" => $item_url,
      "itemdescription" => $title,
      "sessionid" => session_id(),
    );
    if ($item_image_url) {
      $one["itemimageurl"] = $item_image_url;
    }
    if ($uid) {
      $one["userid"] = $uid;
    }
    $tracking_details[] = $one;

  }
  return $tracking_details;
}


/**
 * Implements hook_block_info().
 */
function recommenderghost_ubercart_block_info() {
  $blocks['rg_also_bought_list'] = array(
    'info' => t('RecommenderGhost: Users also bought (list view)'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['rg_also_bought_pictures'] = array(
    'info' => t('RecommenderGhost: Users also bought (picture view)'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * The block defines various blocks for showing recommendations.
 * Only show on node details view.
 *
 * TODO: Use different divs so that you can display multiple JS blocks on
 *       RecommenderGhost on the same page.
 */
function recommenderghost_ubercart_block_view($delta = '') {
  global $user;
  // Following privacy policy of RecommenderGhost we need to
  // encode user ids into non-revertable formatOutput.
  $uid = sha1($user->uid);
  $nid = NULL;

  $tracking_method = variable_get('recommenderghost_tracking_method', 'JS');

  // Only show the recommendations for node views.
  if (arg(0) == 'node' && is_numeric(arg(1)) && !arg(2)) {
    $node = node_load(arg(1));
    $nid = arg(1);
  }
  else {
    // No node view.
    return;
  }

  switch ($delta) {
    case 'rg_also_bought_list':
      if (user_access('access content')) {
        $block['subject'] = t("Users also bought");
        $div = "recommenderDivAlsoBoughtList";
        $drawing_callback = "drawRecommendationList";
        $nb_of_recommendations = variable_get('recommenderghost_block_number_of_recommendations_rg_also_bought_list', '5');
      }
      break;

    case 'rg_also_bought_pictures':
      if (user_access('access content')) {
        $block['subject'] = t("Users also bought");
        $div = "recommenderDivAlsoBoughtPictures";
        $drawing_callback = "drawRecommendationListWithPictures";
        $nb_of_recommendations = variable_get('recommenderghost_block_number_of_recommendations_rg_also_bought_pictures', '5');
      }
      break;
  }

  if ($tracking_method == "REST") {

    // Grab recommendations from website using REST.
    $recommendations = recommenderghost_call_api("otherusersalsobought", array(
      "numberOfResults" => $nb_of_recommendations,
      "itemid" => $nid,
    ));
    // No recommendations for this item.
    if (!isset($recommendations->recommendeditems->item)) {
      return;
    }
    // If only one result then change array structure.
    if (isset($recommendations->recommendeditems->item->creationDate)) {
      $items[0] = $recommendations->recommendeditems->item;
    }
    else {
      $items = $recommendations->recommendeditems->item;
    }

    // Correct some data.
    $new_items = array();
    foreach ($items as $item) {
      $item->imageUrl = isset($item->imageUrl) ? $item->imageUrl : "http://www.recommenderghost.com/sites/all/themes/bootstrap/img/no_image.gif";
      $new_items[] = $item;
    }

    if ($drawing_callback == "drawRecommendationList") {
      $block['content'] = theme('recommenderghost_ubercart_list', array('items' => $new_items));
    }
    else {
      $block['content'] = theme('recommenderghost_ubercart_picture_list', array('items' => $new_items));
    }

  }
  else {

    // JAVASCRIPT implementation.
    $js = "
    <script>
    easyrec_getRecommendations('otherusersalsobought', {
         itemId:'$nid',
         numberOfResults: $nb_of_recommendations,
         drawingCallback:'$drawing_callback',
      }
    );
    </script>
    <div id='recommenderDiv'></div>";
    $block['content'] = $js;
  }

  return $block;
}

/**
 * Implements hook_theme().
 */
function recommenderghost_ubercart_theme() {
  return array(
    'recommenderghost_ubercart_list' => array(
      'variables' => array('items' => NULL),
    ),
    'recommenderghost_ubercart_picture_list' => array(
      'variables' => array('items' => NULL),
    ),
  );
}

/**
 * Returns HTML for the list view.
 */
function theme_recommenderghost_ubercart_list($items) {
  extract($items);
  $html = "<div id='recommenderghostUbercartList'><ul>";
  foreach ($items as $item) {
    $html .= "<li><a href='" . $item->url . "'>" . check_plain($item->description) . "</a></li>";
  }
  $html .= "</ul></div>";
  return $html;
}

/**
 * Returns HTML for the picture list view.
 */
function theme_recommenderghost_ubercart_picture_list($items) {
  extract($items);
  $html = "<div id='recommenderghostUbercartPictureList'><ul>";
  foreach ($items as $item) {
    $html .= "<div style='width:170px;padding:5px;float:left;text-align:center;'><a href='" . $item->url . "'>";
    $html .= "<img style='width:150px;border:0px;' alt='" . check_plain($item->description) . "' src='" . $item->imageUrl . "'><br/>";
    $html .= check_plain($item->description) . "</a></div>";
  }
  $html .= "</ul></div>";
  return $html;
}

/**
 * Implements hook_block_configure().
 */
function recommenderghost_ubercart_block_configure($delta="") {
  return recommenderghost_block_configure($delta);
}

/**
 * Implements hook_block_save().
 */
function recommenderghost_ubercart_block_save($delta='', $edit=array()) {
  variable_set('recommenderghost_block_number_of_recommendations_' . $delta, $edit['recommenderghost_block_number_of_recommendations_' . $delta]);
}
